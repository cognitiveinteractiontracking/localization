<?xml version="1.0"?>
<launch>

  <arg name="id" default="0"/>
  <arg name="tracker_node" default="aruco3_node1_2_awdawdwa"/>
  <arg name="output" default="/$(arg tracker_node)/cam/odom/$(arg id)/filtered"/>

  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_wheel_odometry_$(arg tracker_node)_$(arg id)" output="screen">

    <!-- Frequency of the main run loop. -->
    <param name="frequency" value="30"/>

    <!-- Should be inverse of minimum frequency of the cameras FPS -->
    <param name="sensor_timeout" value="10000"/> <!--how long the sensor waits for data until prediction. Higher value means less prediction. If there is no sensor data the last position will be published until prediction.-->

    <param name="map_frame" value="map"/>
    <param name="odom_frame" value="world"/>
    <param name="base_link_frame" value="base_link_$(arg id)/base_link"/>
    <param name="world_frame" value="world"/>
    <param name="two_d_mode" value="true"/>
    <param name="dynamic_process_noise_covariance" value="false"/>

    <remap from="odometry/filtered" to="$(arg output)"/>


    <param name="odom0" value="/$(arg tracker_node)/cam/odom/$(arg id)"/>
    <rosparam param="odom0_config">[true,  true,  true,
                                    true, true, true,
                                    false, false, false,
                                    false, false, false,
                                    false, false, false]</rosparam>
    <param name="odom0_differential" value="false"/>
    <param name="odom0_relative" value="false"/>

    <!--[ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is-->
    <!--exposed as a configuration parameter. This matrix represents the noise we add to the total error after each-->
    <!--prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.-->
    <!--However, if users find that a given variable is slow to converge, one approach is to increase the-->
    <!--process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error-->
    <!--to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are-->
    <!--ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if-->
    <!--unspecified.-->
    <rosparam param="process_noise_covariance">[
      0.1,  0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
      0,    0.1,  0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
      0,    0,    0.15, 0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0.1,  0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0.1,  0,    0,     0,     0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0.15, 0,     0,     0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0.025, 0,     0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,     0.025, 0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,     0,     0.04, 0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,     0,     0,    0.01, 0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0.01, 0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0.02, 0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0.01, 0,    0,
      0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0.01, 0,
      0,    0,    0,    0,    0,    0,    0,     0,     0,    0,    0,    0,    0,    0,    0.015]</rosparam>


    <!--[ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal-->
    <!--value (variance) to a large value will result in rapid convergence for initial measurements of the variable in-->
    <!--question. Users should take care not to use large values for variables that will not be measured directly. The values-->
    <!--are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below-->
    <!--if unspecified.-->
    <rosparam param="initial_estimate_covariance">[
      1e-9, 0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
      0,    1e-9, 0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
      0,    0,    1e-9, 0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
      0,    0,    0,    1e-9, 0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
      0,    0,    0,    0,    1e-9, 0,    0,    0,    0,    0,     0,     0,     0,    0,    0,
      0,    0,    0,    0,    0,    1e-9, 0,    0,    0,    0,     0,     0,     0,    0,    0,
      0,    0,    0,    0,    0,    0,    1e-9, 0,    0,    0,     0,     0,     0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    1e-9, 0,    0,     0,     0,     0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    1e-9, 0,     0,     0,     0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    1e-9,  0,     0,     0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     1e-9,  0,     0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     1e-9,  0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     1e-9, 0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    1e-9, 0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,     0,     0,     0,    0,    1e-9]</rosparam>

  </node>

</launch>